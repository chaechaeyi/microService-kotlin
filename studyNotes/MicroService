MicroService
- 마이크로 서비스란 무엇인가?
- 마이크로 서비스 원칙 이해
- 클린 아키텍처를 위한 도메인 주도 설계
- 넌블로킹 리액티브 마이크로 서비스
- 클라우드 네이티브 마이크로서비스와 장점


1. 마이크로 서비스란?
- 모듈방식
- 세분화 된 기능을 제공하는 느슨하게 결합된 서비스
- 관심 사항을 물리적으로 분리해 독립적으로 설계, 개발, 테스트, 배포 가능한 형태
- 물리적으로 나뉘어져 있기에 빠른 개발, 반복적 개선, 지속적인 사용자 피드백 수집을 목표로하는 애자일 기법에 적합
- 모듈별로 독립적으로 배포 가능하므로 지속적 배포(continous Deployment - 코드 변경 될 때마다 자동으로 빌드/테스트/배포 과정을 거쳐서 실환경에 반영)

- SOA(Service Oriented Architecture)에서 발전한 개념
1. 발전의 이유 (SOA → 마이크로서비스)
    SOA의 한계
        (1) 중앙 집중화 문제 (ESB)
            SOA는 보통 ESB(Enterprise Service Bus) 같은 중앙 허브를 통해 서비스 간 통신을 관리한다
            ESB는 복잡성과 비용을 증가시키고 단일 실패 지점(Single Point of Failure)을 만들어 장애 발생 시 시스템 전체에 영향을 미칠 수 있음
        (2) 무거운 프로토콜
            SOA는 주로 SOAP과 같은 무거운 프로토콜을 사용하며, 구현 및 유지보수가 어렵다
        (3) 유연성 부족
            SOA는 대규모 통합 시스템을 위한 구조로 설계되어, 특정 서비스만 빠르게 변경하거나 배포하기 어려운 경우가 많음

    SOA의 복잡성과 중앙 집중화 문제를 해결하기 위해 더 작고 독립적이며, 가벼운 통신 방식을 사용하는 마이크로서비스가 등장

2. SOA와 마이크로서비스의 주요 차이
    (1) 목적
        SOA: 기업 전체의 시스템 통합에 초점.
        마이크로서비스: 개별 애플리케이션의 민첩성과 독립성 강화에 초점.
    (2) 서비스 크기
        SOA: 비교적 큰 비즈니스 단위로 서비스 구성.
        마이크로서비스: 작은 기능 단위로 서비스 구성.
    (3) 통신 방식
        SOA: 주로 SOAP, XML 같은 무거운 프로토콜 사용.
        마이크로서비스: REST, JSON, gRPC 같은 가벼운 프로토콜 사용.
    (4) 중앙 관리
        SOA: ESB(Enterprise Service Bus) 같은 중앙 허브로 서비스 통합.
        마이크로서비스: 중앙 허브 없이 서비스 간 직접 통신(필요 시 메시지 브로커 사용).
    (5) 배포 방식
        SOA: 서비스 간 의존성이 커서 독립 배포가 어려움.
        마이크로서비스: 각 서비스가 독립적으로 배포 가능(CI/CD 친화적).
    (6) 확장성
        SOA: 특정 서비스만 확장하기 어려움.
        마이크로서비스: 각 서비스 단위로 독립적인 확장이 가능.
    (7) 초점
        SOA: 대규모 통합 시스템 설계(기업 전반의 비즈니스 프로세스 최적화).
        마이크로서비스: 독립적이고 빠르게 배포 가능한 서비스 설계(애플리케이션의 유연성 강화).

*용어사전
- 프레젠테이션 레이어: 사용자를 위한 UI
- 비즈니스 레이어: 비즈니스 기능을 위한 도메인 로직을 구현한 서비스
- 데이터 레이어: 도메인 모델을 관리